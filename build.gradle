plugins {
  id 'java'
  id 'application'
  id 'org.javamodularity.moduleplugin' version '1.8.12'
  id 'org.openjfx.javafxplugin' version '0.1.0'
  id 'org.beryx.jlink' version '2.25.0'
}

group = 'com.sdm'
version = '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

// Estrazione delle versioni in variabili
ext {
  junitVersion = '5.11.0'
  javafxVersion = '21-ea+24'
  controlsfxVersion = '11.1.2'
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

application {
  // Definizione del main module e della main class
  mainModule = 'com.sdm'
  mainClass = 'com.sdm.HelloApplication'
}

java {
  sourceCompatibility = JavaVersion.VERSION_22
  targetCompatibility = JavaVersion.VERSION_22
}

javafx {
  // Uso della variabile per la versione di JavaFX
  version = javafxVersion
  modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
  // Uso della variabile per la versione di ControlsFX
  implementation("org.controlsfx:controlsfx:${controlsfxVersion}")

  // Dipendenze JUnit
  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
  testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
}

test {
  // Configurazione per usare JUnit Platform
  useJUnitPlatform()

  // JVM arguments per i test con aggiunta di moduli JavaFX e lettura di moduli necessari
  jvmArgs += [
          '--module-path', classpath.asPath,
          '--add-modules', 'javafx.controls,javafx.fxml',
          '--add-reads', 'com.sdm=org.junit.jupiter.api'
  ]
}

jlink {
  // Uso di layout.buildDirectory.file() invece di buildDir
  imageZip = layout.buildDirectory.file("distributions/app-${javafx.platform.classifier}.zip").get().asFile
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

  // Definizione del launcher
  launcher {
    name = 'app'
  }
}

tasks.named('jlinkZip') {
  group = 'distribution'
}

